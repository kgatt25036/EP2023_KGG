@model Presentation.Models.ViewModels.CreateTicketViewModel

@{
    ViewData["Title"] = "CreateTicket";
}

<h1>Create Ticket</h1>

<h4>CreateTicketViewModel</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="CreateTicket" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div>
                <label for="selected-seat">Selected Seat:</label>
                <span id="selected-seat"></span>
            </div>
            <div class="form-group">
                <label asp-for="SeatRow" class="control-label">Seat Row</label>
                <input asp-for="SeatRow" class="form-control" readonly />
                <span asp-validation-for="SeatRow" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SeatColumn" class="control-label">Seat Column</label>
                <input asp-for="SeatColumn" class="form-control" readonly />
                <span asp-validation-for="SeatColumn" class="text-danger"></span>
            </div>
            <div id="seat-picker"></div>
            <div class="form-group">
                <label asp-for="FlightIdFK" class="control-label">Flight ID</label>
                <input asp-for="FlightIdFK" class="form-control" readonly />
                <span asp-validation-for="FlightIdFK" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Passport" class="control-label"></label>
                <input asp-for="Passport" class="form-control" />
                <span asp-validation-for="Passport" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Passport" class="control-label">Upload Image</label>
                <input type="file" name="PassImgFile" class="form-control" />
            </div>
            <th>
                Price to be paid:
            </th>
        <dd class="col-sm-10">
                @Html.DisplayFor(model => model.price)
        </dd>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="PricePaid" /> @Html.DisplayNameFor(model => model.PricePaid)
                </label>
            </div>

        


            <div class="form-group">
                <input id="submitButton" type="submit" value="Create" class="btn btn-primary" @(!Model.PricePaid ? "disabled" : "") />
            </div>
        </form>
    </div>
</div>

<div style="margin-top: 5px;">
    <form asp-controller="Tickets" asp-action="ShowFlights" method="get">
        <button type="submit" class="btn btn-primary">Back to List</button>
    </form>
</div>

@section scripts {
    <script>
        /*$('button').click(function (event)(){
            event.prefentDefault();
        }*/
        const seatPicker = document.getElementById('seat-picker');
        const selectedSeatDisplay = document.getElementById('selected-seat');
        const selectedRowInput = document.getElementById('SeatRow');
        const selectedColumnInput = document.getElementById('SeatColumn');
        const selectedSeats = new Set();

        // Initialize the seating plan (replace these values with your actual flight data)
        createSeats(@Model.Flight.SeatRows, @Model.Flight.SeatColumns);

        // Function to create seats dynamically based on flight data
        function createSeats(rows, columns) {
            for (let row = 1; row <= rows; row++) {
                for (let col = 1; col <= columns; col++) {
                    const seat = document.createElement('button');
                    seat.id = `_${row}_${col}`;
                    seat.classList.add('btn', 'btn-secondary', 'seat');
                    seat.dataset.row = row;
                    seat.dataset.column = col;
                    seat.innerText = `${row}-${col}`;
                    seat.addEventListener('click', toggleSeat);
                    seatPicker.appendChild(seat);
                }
            }
        }

        // Function to toggle seat selection
        function toggleSeat(event) {
            event.preventDefault();
            debugger;
            const seat = this;
            const seatId = seat.id;//`${seat.dataset.row}-${seat.dataset.column}`;
            if (selectedSeats.size>0) {
                // Clear previous selections
                clearSelectedSeats();

                // Add the selected seat to the set
                selectedSeats.add(seatId);

                // Update display and input fields
                selectedSeatDisplay.value = `Selected Seat: ${seatId}`;
                selectedRowInput.value = seat.dataset.row;
                selectedColumnInput.value = seat.dataset.column;

                // Optionally, you can visually highlight the selected seat
                seat.classList.add('selected-seat');
            }
            else{
                // Add the selected seat to the set
                selectedSeats.add(seatId);

                // Update display and input fields
                selectedSeatDisplay.value = `Selected Seat: ${seatId}`;
                selectedRowInput.value = seat.dataset.row;
                selectedColumnInput.value = seat.dataset.column;

                // Optionally, you can visually highlight the selected seat
                seat.classList.add('selected-seat');
            }

        }

        // Function to clear selected seats
        function clearSelectedSeats() {
            selectedSeats.forEach((seatId) => {
                const [row, col] = seatId.split('-');
                const seat = document.querySelector(`.seat[data-row="${row}"][data-column="${col}"]`);
                if (seat) {
                    seat.classList.remove('selected-seat');
                }
            });
        }
        $(document).ready(function () {
            $('#PricePaid').change(function () {
                updateButtonState();
            });
            updateButtonState();
            function updateButtonState() {
                var pricePaid = $('#PricePaid').is(':checked');
                $('#submitButton').prop('disabled', !pricePaid);
            }
        });
    </script>
}


